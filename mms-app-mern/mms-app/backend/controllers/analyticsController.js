// backend/controllers/analyticsController.js
const Equipment = require('../models/Equipment');
const Inspection = require('../models/Inspection');
const Backlog = require('../models/Backlog');
const WorkOrder = require('../models/WorkOrder');
const PreventiveMaintenance = require('../models/PreventiveMaintenance');

// @desc    Get dashboard statistics
// @route   GET /api/analytics/dashboard
// @access  Private
exports.getDashboardStats = async (req, res, next) => {
  try {
    const stats = {
      equipment: {
        total: await Equipment.countDocuments({ isDeleted: false }),
        active: await Equipment.countDocuments({ isDeleted: false, status: 'Active' }),
        maintenance: await Equipment.countDocuments({ isDeleted: false, status: 'Maintenance' }),
        criticalA: await Equipment.countDocuments({ isDeleted: false, criticality: 'A' })
      },
      inspections: {
        total: await Inspection.countDocuments({ isDeleted: false }),
        scheduled: await Inspection.countDocuments({ isDeleted: false, status: 'Scheduled' }),
        inProgress: await Inspection.countDocuments({ isDeleted: false, status: 'In Progress' }),
        completed: await Inspection.countDocuments({ isDeleted: false, status: 'Completed' }),
        overdue: await Inspection.countDocuments({ 
          isDeleted: false, 
          status: { $ne: 'Completed' },
          scheduledDate: { $lt: new Date() }
        })
      },
      backlogs: {
        total: await Backlog.countDocuments({ isDeleted: false }),
        open: await Backlog.countDocuments({ isDeleted: false, status: 'Open' }),
        inProgress: await Backlog.countDocuments({ isDeleted: false, status: 'In Progress' }),
        overdue: await Backlog.countDocuments({ 
          isDeleted: false, 
          status: { $ne: 'Completed' },
          dueDate: { $lt: new Date() }
        })
      },
      workOrders: {
        total: await WorkOrder.countDocuments({ isDeleted: false }),
        planned: await WorkOrder.countDocuments({ isDeleted: false, status: 'Planned' }),
        inProgress: await WorkOrder.countDocuments({ isDeleted: false, status: 'In Progress' }),
        completed: await WorkOrder.countDocuments({ isDeleted: false, status: 'Completed' }),
        autoGenerated: await WorkOrder.countDocuments({ isDeleted: false, woType: 'Auto Generated' }),
        userGenerated: await WorkOrder.countDocuments({ isDeleted: false, woType: 'User Generated' })
      }
    };

    res.status(200).json({
      success: true,
      data: stats
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get equipment health metrics
// @route   GET /api/analytics/equipment-health
// @access  Private
exports.getEquipmentHealth = async (req, res, next) => {
  try {
    const equipment = await Equipment.find({ isDeleted: false })
      .select('name code healthScore criticality type level uptimePercentage');

    const healthDistribution = {
      excellent: equipment.filter(eq => eq.healthScore >= 90).length,
      good: equipment.filter(eq => eq.healthScore >= 70 && eq.healthScore < 90).length,
      fair: equipment.filter(eq => eq.healthScore >= 50 && eq.healthScore < 70).length,
      poor: equipment.filter(eq => eq.healthScore < 50).length
    };

    const avgHealthByType = await Equipment.aggregate([
      { $match: { isDeleted: false } },
      { $group: {
        _id: '$type',
        avgHealth: { $avg: '$healthScore' },
        avgUptime: { $avg: '$uptimePercentage' },
        count: { $sum: 1 }
      }}
    ]);

    res.status(200).json({
      success: true,
      data: {
        equipment,
        healthDistribution,
        avgHealthByType
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get maintenance trends
// @route   GET /api/analytics/maintenance-trends
// @access  Private
exports.getMaintenanceTrends = async (req, res, next) => {
  try {
    const { startDate, endDate } = req.query;
    
    const dateFilter = {};
    if (startDate) dateFilter.$gte = new Date(startDate);
    if (endDate) dateFilter.$lte = new Date(endDate);

    const workOrderTrends = await WorkOrder.aggregate([
      { 
        $match: { 
          isDeleted: false,
          ...(Object.keys(dateFilter).length && { createdAt: dateFilter })
        }
      },
      {
        $group: {
          _id: {
            month: { $month: '$createdAt' },
            year: { $year: '$createdAt' },
            type: '$type'
          },
          count: { $sum: 1 },
          totalCost: { $sum: '$actualCost' },
          totalHours: { $sum: '$actualHours' }
        }
      },
      { $sort: { '_id.year': 1, '_id.month': 1 } }
    ]);

    const backlogTrends = await Backlog.aggregate([
      { 
        $match: { 
          isDeleted: false,
          ...(Object.keys(dateFilter).length && { createdAt: dateFilter })
        }
      },
      {
        $group: {
          _id: {
            month: { $month: '$createdAt' },
            year: { $year: '$createdAt' },
            category: '$category'
          },
          count: { $sum: 1 }
        }
      },
      { $sort: { '_id.year': 1, '_id.month': 1 } }
    ]);

    res.status(200).json({
      success: true,
      data: {
        workOrderTrends,
        backlogTrends
      }
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get cost analysis
// @route   GET /api/analytics/cost-analysis
// @access  Private
exports.getCostAnalysis = async (req, res, next) => {
  try {
    const costByCategory = await WorkOrder.aggregate([
      { $match: { isDeleted: false, status: 'Completed' } },
      { $unwind: '$materials' },
      {
        $group: {
          _id: null,
          materialCost: { $sum: '$materials.totalCost' },
          laborCost: { $sum: '$actualCost' }
        }
      }
    ]);

    const costByEquipment = await WorkOrder.aggregate([
      { $match: { isDeleted: false, status: 'Completed' } },
      { 
        $lookup: {
          from: 'equipment',
          localField: 'equipment',
          foreignField: '_id',
          as: 'equipmentData'
        }
      },
      { $unwind: '$equipmentData' },
      {
        $group: {
          _id: {
            equipment: '$equipmentData.name',
            type: '$equipmentData.type'
          },
          totalCost: { $sum: '$actualCost' },
          count: { $sum: 1 },
          avgCost: { $avg: '$actualCost' }
        }
      },
      { $sort: { totalCost: -1 } },
      { $limit: 10 }
    ]);

    res.status(200).json({
      success: true,
      data: {
        costByCategory: costByCategory[0] || { materialCost: 0, laborCost: 0 },
        costByEquipment
      }
    });
  } catch (error) {
    next(error);
  }
};

// Add these functions to the end of your analyticsController.js file

// @desc    Get performance metrics
// @route   GET /api/analytics/performance
// @access  Private
exports.getPerformanceMetrics = async (req, res, next) => {
  try {
    // Placeholder implementation
    const metrics = {
      overall: {
        efficiency: 85,
        availability: 92,
        reliability: 88
      },
      trends: {
        lastMonth: 83,
        currentMonth: 85,
        improvement: 2.4
      }
    };

    res.status(200).json({
      success: true,
      data: metrics
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Get reliability metrics
// @route   GET /api/analytics/reliability
// @access  Private
exports.getReliabilityMetrics = async (req, res, next) => {
  try {
    // Placeholder implementation
    const metrics = {
      mtbf: 720, // Mean Time Between Failures (hours)
      mttr: 4,   // Mean Time To Repair (hours)
      availability: 94.5,
      failureRate: 0.05
    };

    res.status(200).json({
      success: true,
      data: metrics
    });
  } catch (error) {
    next(error);
  }
};

// @desc    Export analytics data
// @route   GET /api/analytics/export
// @access  Private
exports.exportAnalytics = async (req, res, next) => {
  try {
    const { format = 'csv' } = req.query;
    
    // Placeholder implementation
    const data = [
      { metric: 'Equipment Health', value: 85, unit: '%' },
      { metric: 'Work Orders Completed', value: 45, unit: 'count' },
      { metric: 'Average Repair Time', value: 4.2, unit: 'hours' }
    ];

    if (format === 'csv') {
      const { Parser } = require('@json2csv/plainjs');
      const parser = new Parser();
      const csv = parser.parse(data);
      
      res.header('Content-Type', 'text/csv');
      res.attachment(`analytics_export_${Date.now()}.csv`);
      return res.send(csv);
    }

    res.status(200).json({
      success: true,
      data
    });
  } catch (error) {
    next(error);
  }
};