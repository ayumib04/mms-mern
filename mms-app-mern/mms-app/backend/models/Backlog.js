// backend/models/Backlog.js
const mongoose = require('mongoose');

const backlogSchema = new mongoose.Schema({
  code: {
    type: String,
    required: true,
    unique: true
  },
  equipment: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Equipment',
    required: true
  },
  issue: {
    type: String,
    required: [true, 'Issue description is required']
  },
  category: {
    type: String,
    enum: ['Mechanical', 'Electrical', 'Safety', 'Environmental', 'Operational', 'Instrumentation', 'Preventive', 'Inspection Finding'],
    required: true
  },
  priority: {
    type: String,
    enum: ['P1', 'P2', 'P3', 'P4'],
    required: true
  },
  status: {
    type: String,
    enum: ['Open', 'Validated', 'Planned', 'In Progress', 'Completed', 'Cancelled'],
    default: 'Open'
  },
  dueDate: {
    type: Date,
    required: true
  },
  assignedTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  estimatedHours: {
    type: Number,
    min: 0
  },
  actualHours: {
    type: Number,
    min: 0
  },
  progress: {
    type: Number,
    default: 0,
    min: 0,
    max: 100
  },
  estimatedCost: {
    type: Number,
    min: 0
  },
  actualCost: {
    type: Number,
    min: 0
  },
  workOrder: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'WorkOrder'
  },
  autoGenerated: {
    type: Boolean,
    default: false
  },
  source: {
    type: String,
    enum: ['Manual Entry', 'Inspection Finding', 'Running Hours Alert', 'PM Schedule', 'System Alert'],
    default: 'Manual Entry'
  },
  sourceReference: {
    type: {
      type: String,
      enum: ['Inspection', 'Equipment', 'PM', 'WorkOrder']
    },
    id: mongoose.Schema.Types.ObjectId
  },
  attachments: [{
    filename: String,
    path: String,
    uploadedAt: Date
  }],
  comments: [{
    text: String,
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User'
    },
    timestamp: {
      type: Date,
      default: Date.now
    }
  }],
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  isDeleted: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

// Indexes
backlogSchema.index({ equipment: 1, status: 1, priority: 1 });
backlogSchema.index({ assignedTo: 1, status: 1 });
backlogSchema.index({ dueDate: 1, status: 1 });

// Virtual for overdue status
backlogSchema.virtual('isOverdue').get(function() {
  return this.dueDate < new Date() && this.status !== 'Completed';
});

// Method to calculate priority based on due date
backlogSchema.pre('save', function(next) {
  if (this.isNew && !this.dueDate) {
    const now = new Date();
    switch (this.priority) {
      case 'P1':
        this.dueDate = new Date(now.getTime() + 4 * 60 * 60 * 1000); // 4 hours
        break;
      case 'P2':
        this.dueDate = new Date(now.getTime() + 48 * 60 * 60 * 1000); // 48 hours
        break;
      case 'P3':
        this.dueDate = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000); // 1 week
        break;
      case 'P4':
        this.dueDate = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000); // 1 month
        break;
    }
  }
  next();
});

module.exports = mongoose.model('Backlog', backlogSchema);
