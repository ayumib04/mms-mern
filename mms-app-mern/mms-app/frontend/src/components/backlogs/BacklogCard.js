import React, { useState } from 'react';
import { ArrowDown, ArrowRight, Wrench, Edit, Eye } from 'lucide-react';

export default function BacklogCard({ backlog, onUpdateStatus, onGenerateWorkOrder, onSelect, isSelected }) {
  const [expanded, setExpanded] = useState(false);
  
  const getStatusColor = (status) => {
    switch (status) {
      case 'Open': return 'bg-blue-100 text-blue-800';
      case 'Validated': return 'bg-yellow-100 text-yellow-800';
      case 'Planned': return 'bg-purple-100 text-purple-800';
      case 'In Progress': return 'bg-orange-100 text-orange-800';
      case 'Completed': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'P1': return 'bg-red-100 text-red-800';
      case 'P2': return 'bg-orange-100 text-orange-800';
      case 'P3': return 'bg-yellow-100 text-yellow-800';
      case 'P4': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const isOverdue = new Date(backlog.dueDate) < new Date() && backlog.status !== 'Completed';

  const getNextStatus = (currentStatus) => {
    switch (currentStatus) {
      case 'Open': return 'Validated';
      case 'Validated': return 'Planned';
      case 'Planned': return 'In Progress';
      case 'In Progress': return 'Completed';
      default: return null;
    }
  };

  const getActionLabel = (currentStatus) => {
    switch (currentStatus) {
      case 'Open': return 'Validate';
      case 'Validated': return 'Plan';
      case 'Planned': return 'Start Work';
      case 'In Progress': return 'Complete';
      default: return null;
    }
  };

  const handleStatusUpdate = () => {
    const nextStatus = getNextStatus(backlog.status);
    if (nextStatus) {
      onUpdateStatus(backlog._id, nextStatus);
    }
  };

  const canGenerateWorkOrder = ['Open', 'Validated', 'Planned'].includes(backlog.status) && !backlog.workOrderId;

  return (
    <div className={`p-4 sm:p-6 ${isOverdue ? 'bg-red-50' : ''}`}>
      <div className="flex items-start justify-between">
        <div className="flex items-start space-x-3 flex-1 min-w-0">
          <input
            type="checkbox"
            checked={isSelected}
            onChange={(e) => onSelect(backlog._id, e.target.checked)}
            className="mt-1 rounded text-blue-600 flex-shrink-0"
          />
          <div className="flex-1 min-w-0">
            <div className="flex flex-wrap items-center gap-2 mb-2">
              <h4 className="text-sm sm:text-lg font-medium text-gray-900">{backlog.backlogId}</h4>
              <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(backlog.status)}`}>
                {backlog.status}
              </span>
              <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPriorityColor(backlog.priority)}`}>
                {backlog.priority}
              </span>
              {backlog.autoGenerated && (
                <span className="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">
                  AUTO
                </span>
              )}
              {backlog.workOrderId && (
                <span className="px-2 py-1 text-xs font-medium bg-green-100 text-green-800 rounded-full">
                  WO CREATED
                </span>
              )}
              {isOverdue && (
                <span className="px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800">
                  OVERDUE
                </span>
              )}
            </div>
            
            <p className="text-xs sm:text-sm text-gray-700 mb-3 line-clamp-2">{backlog.issue}</p>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-4 text-xs sm:text-sm text-gray-600">
              <div>
                <span className="font-medium">Equipment:</span> 
                <span className="truncate"> {backlog.equipmentId?.name || 'N/A'}</span>
              </div>
              <div>
                <span className="font-medium">Category:</span> {backlog.category}
              </div>
              <div>
                <span className="font-medium">Assigned:</span> {backlog.assignedTo?.name || backlog.assignedTo || 'Unassigned'}
              </div>
              <div>
                <span className="font-medium">Due:</span> 
                <span className={isOverdue ? 'text-red-600 font-medium' : ''}> 
                  {new Date(backlog.dueDate).toLocaleDateString()}
                </span>
              </div>
              <div>
                <span className="font-medium">Source:</span> {backlog.source}
              </div>
            </div>

            {backlog.progress > 0 && (
              <div className="mt-3">
                <div className="flex items-center justify-between text-xs sm:text-sm text-gray-600 mb-1">
                  <span>Progress</span>
                  <span>{backlog.progress}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-1.5 sm:h-2">
                  <div 
                    className="bg-blue-500 h-1.5 sm:h-2 rounded-full transition-all duration-300" 
                    style={{ width: `${backlog.progress}%` }}
                  ></div>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="flex items-center space-x-1 sm:space-x-2 flex-shrink-0">
          <button
            onClick={() => setExpanded(!expanded)}
            className="p-2 text-gray-400 hover:text-gray-600 transition-colors min-h-[44px] min-w-[44px] flex items-center justify-center"
          >
            {expanded ? <ArrowDown className="w-4 h-4 sm:w-5 sm:h-5" /> : <ArrowRight className="w-4 h-4 sm:w-5 sm:h-5" />}
          </button>
          
          <div className="flex flex-col sm:flex-row items-stretch sm:items-center space-y-1 sm:space-y-0 sm:space-x-2">
            {canGenerateWorkOrder && (
              <button
                onClick={() => onGenerateWorkOrder(backlog._id)}
                className="px-2 sm:px-3 py-1 bg-green-600 text-white text-xs sm:text-sm rounded-lg hover:bg-green-700 transition-colors min-h-[36px] flex items-center justify-center"
              >
                <Wrench className="w-3 h-3 sm:w-4 sm:h-4 mr-1" />
                <span className="hidden sm:inline">Generate WO</span>
                <span className="sm:hidden">WO</span>
              </button>
            )}
            {getActionLabel(backlog.status) && (
              <button
                onClick={handleStatusUpdate}
                className="px-2 sm:px-3 py-1 bg-blue-600 text-white text-xs sm:text-sm rounded-lg hover:bg-blue-700 transition-colors min-h-[36px] flex items-center"
              >
                <span className="hidden sm:inline">{getActionLabel(backlog.status)}</span>
                <span className="sm:hidden">{getActionLabel(backlog.status).split(' ')[0]}</span>
              </button>
            )}
          </div>
        </div>
      </div>

      {expanded && (
        <div className="mt-4 sm:mt-6 pt-4 sm:pt-6 border-t border-gray-200">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
            <div>
              <h5 className="font-medium text-gray-900 mb-3">Details</h5>
              <div className="space-y-2 text-xs sm:text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-600">Created:</span>
                  <span>{new Date(backlog.createdDate).toLocaleDateString()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-600">Estimated Hours:</span>
                  <span>{backlog.estimatedHours}h</span>
                </div>
                {backlog.actualHours && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Actual Hours:</span>
                    <span>{backlog.actualHours}h</span>
                  </div>
                )}
                <div className="flex justify-between">
                  <span className="text-gray-600">Estimated Cost:</span>
                  <span>₹{backlog.estimatedCost}</span>
                </div>
                {backlog.actualCost && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Actual Cost:</span>
                    <span>₹{backlog.actualCost}</span>
                  </div>
                )}
              </div>
            </div>
            <div>
              <h5 className="font-medium text-gray-900 mb-3">Actions</h5>
              <div className="space-y-2">
                <button className="w-full px-3 py-2 bg-gray-600 text-white text-xs sm:text-sm rounded-lg hover:bg-gray-700 transition-colors min-h-[44px] flex items-center justify-center">
                  <Edit className="w-4 h-4 mr-1 sm:mr-2" />
                  Edit Backlog
                </button>
                {canGenerateWorkOrder && (
                  <button 
                    onClick={() => onGenerateWorkOrder(backlog._id)}
                    className="w-full px-3 py-2 bg-green-600 text-white text-xs sm:text-sm rounded-lg hover:bg-green-700 transition-colors min-h-[44px] flex items-center justify-center"
                  >
                    <Wrench className="w-4 h-4 mr-1 sm:mr-2" />
                    Generate Work Order
                  </button>
                )}
                {backlog.workOrderId && (
                  <button className="w-full px-3 py-2 bg-blue-600 text-white text-xs sm:text-sm rounded-lg hover:bg-blue-700 transition-colors min-h-[44px] flex items-center justify-center">
                    <Eye className="w-4 h-4 mr-1 sm:mr-2" />
                    View Work Order
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}