import React from 'react';
import { CheckCircle } from 'lucide-react';

export default function BacklogKanbanCard({ backlog, onUpdateStatus, onGenerateWorkOrder }) {
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'P1': return 'border-l-red-500';
      case 'P2': return 'border-l-orange-500';
      case 'P3': return 'border-l-yellow-500';
      case 'P4': return 'border-l-green-500';
      default: return 'border-l-gray-500';
    }
  };

  const isOverdue = new Date(backlog.dueDate) < new Date() && backlog.status !== 'Completed';

  const getNextStatus = (currentStatus) => {
    switch (currentStatus) {
      case 'Open': return 'Validated';
      case 'Validated': return 'Planned';
      case 'Planned': return 'In Progress';
      case 'In Progress': return 'Completed';
      default: return null;
    }
  };

  const handleStatusUpdate = () => {
    const nextStatus = getNextStatus(backlog.status);
    if (nextStatus) {
      onUpdateStatus(backlog._id, nextStatus);
    }
  };

  const canGenerateWorkOrder = ['Open', 'Validated', 'Planned'].includes(backlog.status) && !backlog.workOrderId;

  return (
    <div className={`p-3 bg-white border-l-4 ${getPriorityColor(backlog.priority)} rounded-lg shadow-sm hover:shadow-md transition-shadow cursor-pointer ${isOverdue ? 'bg-red-50' : ''}`}>
      <div className="flex items-center justify-between mb-2">
        <span className="text-xs sm:text-sm font-medium text-gray-900">{backlog.backlogId}</span>
        <div className="flex items-center space-x-1">
          <span className="text-xs text-gray-500">{backlog.priority}</span>
          {backlog.autoGenerated && (
            <span className="text-xs bg-blue-100 text-blue-800 px-1 rounded">AUTO</span>
          )}
        </div>
      </div>
      
      <p className="text-xs sm:text-sm text-gray-700 mb-2 line-clamp-2">{backlog.issue}</p>
      
      <div className="text-xs text-gray-500 mb-2">
        <div className="truncate">{backlog.equipmentId?.name || 'N/A'}</div>
        <div>{backlog.category}</div>
      </div>
      
      <div className="flex items-center justify-between text-xs text-gray-500 mb-2">
        <span className="truncate">{backlog.assignedTo?.name || backlog.assignedTo || 'Unassigned'}</span>
        <span className={isOverdue ? 'text-red-600 font-medium' : ''}>
          {new Date(backlog.dueDate).toLocaleDateString()}
        </span>
      </div>
      
      {backlog.progress > 0 && (
        <div className="mb-2">
          <div className="w-full bg-gray-200 rounded-full h-1">
            <div 
              className="bg-blue-500 h-1 rounded-full" 
              style={{ width: `${backlog.progress}%` }}
            ></div>
          </div>
        </div>
      )}

      <div className="space-y-1">
        {canGenerateWorkOrder && (
          <button
            onClick={(e) => {
              e.stopPropagation();
              onGenerateWorkOrder(backlog._id);
            }}
            className="w-full px-2 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700 transition-colors min-h-[32px]"
          >
            Generate WO
          </button>
        )}
        
        {getNextStatus(backlog.status) && (
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleStatusUpdate();
            }}
            className="w-full px-2 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors min-h-[32px]"
          >
            Move to {getNextStatus(backlog.status)}
          </button>
        )}

        {backlog.workOrderId && (
          <button
            onClick={(e) => {
              e.stopPropagation();
              alert(`View Work Order ${backlog.workOrderId}`);
            }}
            className="w-full px-2 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700 transition-colors min-h-[32px]"
          >
            View WO
          </button>
        )}
      </div>
    </div>
  );
}