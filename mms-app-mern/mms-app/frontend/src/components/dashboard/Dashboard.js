// frontend/src/components/dashboard/Dashboard.js
import React, { useEffect, useState } from 'react';
import { 
  Factory, Search, FileText, Wrench, TrendingUp, 
  AlertTriangle, CheckCircle, Clock, Users
} from 'lucide-react';
import apiService from '../../services/api';
import LoadingSpinner from '../common/LoadingSpinner';
import { useWebSocket } from '../../hooks/useWebSocket';
import { toast } from 'react-toastify';

const Dashboard = () => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [activities, setActivities] = useState([]);

  useEffect(() => {
    fetchDashboardData();
  }, []);

  // Subscribe to real-time updates
  useWebSocket('stats:updated', (data) => {
    setStats(data);
  });

  const fetchDashboardData = async () => {
    try {
      setLoading(true);
      const response = await apiService.analytics.getDashboard();
      setStats(response.data.data);
    } catch (error) {
      toast.error('Failed to load dashboard data');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <LoadingSpinner text="Loading dashboard..." />;
  }

  const statCards = [
    {
      label: 'Total Equipment',
      value: stats?.equipment?.total || 0,
      icon: Factory,
      color: 'bg-blue-500',
      change: `${stats?.equipment?.active || 0} active`
    },
    {
      label: 'Active Inspections',
      value: stats?.inspections?.inProgress || 0,
      icon: Search,
      color: 'bg-green-500',
      change: `${stats?.inspections?.overdue || 0} overdue`
    },
    {
      label: 'Pending Backlogs',
      value: stats?.backlogs?.open || 0,
      icon: FileText,
      color: 'bg-yellow-500',
      change: `${stats?.backlogs?.overdue || 0} overdue`
    },
    {
      label: 'Work Orders',
      value: stats?.workOrders?.total || 0,
      icon: Wrench,
      color: 'bg-purple-500',
      change: `${stats?.workOrders?.autoGenerated || 0} auto-generated`
    }
  ];

  return (
    <div className="space-y-4 sm:space-y-6">
      {/* Stats Grid */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-6">
        {statCards.map((stat, index) => {
          const Icon = stat.icon;
          return (
            <div key={index} className="bg-white rounded-lg shadow p-4 sm:p-6">
              <div className="flex items-center justify-between">
                <div className="flex-1 min-w-0">
                  <p className="text-xs sm:text-sm font-medium text-gray-600 truncate">{stat.label}</p>
                  <p className="text-xl sm:text-3xl font-bold text-gray-900">{stat.value}</p>
                  <p className="text-xs sm:text-sm text-gray-500 hidden sm:block">
                    {stat.change}
                  </p>
                </div>
                <div className={`${stat.color} p-2 sm:p-3 rounded-lg flex-shrink-0`}>
                  <Icon className="w-4 h-4 sm:w-6 sm:h-6 text-white" />
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-lg shadow p-4 sm:p-6">
        <h3 className="text-base sm:text-lg font-medium text-gray-900 mb-4">Quick Actions</h3>
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
            <Factory className="w-6 h-6 text-blue-600 mb-2 mx-auto" />
            <p className="text-sm text-gray-700">Add Equipment</p>
          </button>
          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
            <Search className="w-6 h-6 text-green-600 mb-2 mx-auto" />
            <p className="text-sm text-gray-700">Schedule Inspection</p>
          </button>
          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
            <FileText className="w-6 h-6 text-yellow-600 mb-2 mx-auto" />
            <p className="text-sm text-gray-700">Create Backlog</p>
          </button>
          <button className="p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
            <Wrench className="w-6 h-6 text-purple-600 mb-2 mx-auto" />
            <p className="text-sm text-gray-700">New Work Order</p>
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
        {/* Equipment Health Overview */}
        <div className="bg-white rounded-lg shadow p-4 sm:p-6">
          <h3 className="text-base sm:text-lg font-medium text-gray-900 mb-4">Critical Equipment Status</h3>
          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 bg-red-50 rounded-lg">
              <div className="flex items-center space-x-3">
                <AlertTriangle className="w-5 h-5 text-red-600" />
                <span className="text-sm font-medium text-gray-900">Low Health Score Equipment</span>
              </div>
              <span className="text-sm font-bold text-red-600">3</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg">
              <div className="flex items-center space-x-3">
                <Clock className="w-5 h-5 text-yellow-600" />
                <span className="text-sm font-medium text-gray-900">Overdue Maintenance</span>
              </div>
              <span className="text-sm font-bold text-yellow-600">5</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
              <div className="flex items-center space-x-3">
                <CheckCircle className="w-5 h-5 text-green-600" />
                <span className="text-sm font-medium text-gray-900">Healthy Equipment</span>
              </div>
              <span className="text-sm font-bold text-green-600">{stats?.equipment?.active || 0}</span>
            </div>
          </div>
        </div>

        {/* Work Order Summary */}
        <div className="bg-white rounded-lg shadow p-4 sm:p-6">
          <h3 className="text-base sm:text-lg font-medium text-gray-900 mb-4">Work Order Summary</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Planned</span>
              <div className="flex items-center space-x-2">
                <div className="w-32 bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-blue-500 h-2 rounded-full" 
                    style={{ width: `${(stats?.workOrders?.planned / stats?.workOrders?.total * 100) || 0}%` }}
                  ></div>
                </div>
                <span className="text-sm font-medium">{stats?.workOrders?.planned || 0}</span>
              </div>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">In Progress</span>
              <div className="flex items-center space-x-2">
                <div className="w-32 bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-yellow-500 h-2 rounded-full" 
                    style={{ width: `${(stats?.workOrders?.inProgress / stats?.workOrders?.total * 100) || 0}%` }}
                  ></div>
                </div>
                <span className="text-sm font-medium">{stats?.workOrders?.inProgress || 0}</span>
              </div>
            </div>
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-600">Completed</span>
              <div className="flex items-center space-x-2">
                <div className="w-32 bg-gray-200 rounded-full h-2">
                  <div 
                    className="bg-green-500 h-2 rounded-full" 
                    style={{ width: `${(stats?.workOrders?.completed / stats?.workOrders?.total * 100) || 0}%` }}
                  ></div>
                </div>
                <span className="text-sm font-medium">{stats?.workOrders?.completed || 0}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
