import React, { useState, useEffect } from 'react';
import { 
  Plus, FileText, Clock, CheckCircle, AlertTriangle, 
  Cog, Users, RotateCcw 
} from 'lucide-react';
import { useApi } from '../../hooks/useApi';
import LoadingSpinner from '../common/LoadingSpinner';
import WorkOrderCard from './WorkOrderCard';
import WorkOrderModal from './WorkOrderModal';

export default function WorkOrders() {
  const [workOrders, setWorkOrders] = useState([]);
  const [equipment, setEquipment] = useState([]);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [workOrderType, setWorkOrderType] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [woTypeFilter, setWoTypeFilter] = useState('all');
  const [loading, setLoading] = useState(true);
  const { request } = useApi();

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      const [woResponse, equipmentResponse] = await Promise.all([
        request('/api/workorders'),
        request('/api/equipment')
      ]);
      setWorkOrders(woResponse.data);
      setEquipment(equipmentResponse.data);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  const createWorkOrder = async (workOrderData) => {
    try {
      const response = await request('/api/workorders', {
        method: 'POST',
        data: workOrderData
      });
      setWorkOrders([...workOrders, response.data]);
      setShowCreateModal(false);
    } catch (error) {
      console.error('Error creating work order:', error);
    }
  };

  const updateWorkOrderStatus = async (workOrderId, newStatus) => {
    try {
      const response = await request(`/api/workorders/${workOrderId}/status`, {
        method: 'PUT',
        data: { status: newStatus }
      });
      setWorkOrders(workOrders.map(wo => 
        wo._id === workOrderId ? response.data : wo
      ));
    } catch (error) {
      console.error('Error updating work order status:', error);
    }
  };

  const generateAutoWorkOrders = async () => {
    try {
      const response = await request('/api/workorders/check-auto', {
        method: 'POST'
      });
      if (response.data.generated > 0) {
        fetchData(); // Refresh the list
        alert(`Generated ${response.data.generated} auto work orders!`);
      } else {
        alert('No equipment met the criteria for auto work order generation.');
      }
    } catch (error) {
      console.error('Error generating auto work orders:', error);
    }
  };

  const filteredWorkOrders = workOrders
    .filter(wo => workOrderType === 'all' || wo.type === workOrderType)
    .filter(wo => statusFilter === 'all' || wo.status === statusFilter)
    .filter(wo => woTypeFilter === 'all' || wo.woType === woTypeFilter);

  const workOrderStats = {
    total: workOrders.length,
    inProgress: workOrders.filter(wo => wo.status === 'In Progress').length,
    completed: workOrders.filter(wo => wo.status === 'Completed').length,
    overdue: workOrders.filter(wo => new Date(wo.scheduledDate) < new Date() && wo.status !== 'Completed').length,
    autoGenerated: workOrders.filter(wo => wo.woType === 'Auto Generated').length,
    userGenerated: workOrders.filter(wo => wo.woType === 'User Generated').length
  };

  if (loading) return <LoadingSpinner />;

  return (
    <div className="space-y-4 sm:space-y-6">
      {/* Header and Controls */}
      <div className="bg-white rounded-lg shadow p-4 sm:p-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 sm:mb-6 space-y-3 sm:space-y-0">
          <h2 className="text-lg sm:text-xl font-semibold text-gray-900">Work Order Management</h2>
          <div className="flex flex-wrap items-center gap-2 sm:gap-3">
            <button
              onClick={generateAutoWorkOrders}
              className="px-3 sm:px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm min-h-[44px] flex items-center"
            >
              <RotateCcw className="w-4 h-4 mr-1 sm:mr-2" />
              Check Auto WOs
            </button>
            <button
              onClick={() => setShowCreateModal(true)}
              className="px-3 sm:px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm min-h-[44px] flex items-center"
            >
              <Plus className="w-4 h-4 mr-1 sm:mr-2" />
              Create Work Order
            </button>
          </div>
        </div>

        {/* Filters */}
        <div className="flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-4">
          <select 
            value={workOrderType} 
            onChange={(e) => setWorkOrderType(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base min-h-[44px]"
          >
            <option value="all">All Types</option>
            <option value="Corrective">Corrective</option>
            <option value="Preventive">Preventive</option>
            <option value="Emergency">Emergency</option>
            <option value="Shutdown">Shutdown</option>
          </select>
          <select 
            value={statusFilter} 
            onChange={(e) => setStatusFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base min-h-[44px]"
          >
            <option value="all">All Status</option>
            <option value="Planned">Planned</option>
            <option value="In Progress">In Progress</option>
            <option value="Completed">Completed</option>
            <option value="On Hold">On Hold</option>
          </select>
          <select 
            value={woTypeFilter} 
            onChange={(e) => setWoTypeFilter(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-base min-h-[44px]"
          >
            <option value="all">All Generation Types</option>
            <option value="Auto Generated">Auto Generated</option>
            <option value="User Generated">User Generated</option>
          </select>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-2 lg:grid-cols-6 gap-3 sm:gap-6">
        <StatCard title="Total WOs" value={workOrderStats.total} icon={FileText} color="blue" />
        <StatCard title="In Progress" value={workOrderStats.inProgress} icon={Clock} color="yellow" />
        <StatCard title="Completed" value={workOrderStats.completed} icon={CheckCircle} color="green" />
        <StatCard title="Overdue" value={workOrderStats.overdue} icon={AlertTriangle} color="red" />
        <StatCard title="Auto Generated" value={workOrderStats.autoGenerated} icon={Cog} color="blue" />
        <StatCard title="User Generated" value={workOrderStats.userGenerated} icon={Users} color="purple" />
      </div>

      {/* Work Orders List */}
      <div className="bg-white rounded-lg shadow">
        <div className="p-4 sm:p-6 border-b border-gray-200">
          <h3 className="text-base sm:text-lg font-medium text-gray-900">Work Orders</h3>
        </div>
        <div className="divide-y divide-gray-200">
          {filteredWorkOrders.map((workOrder) => (
            <WorkOrderCard 
              key={workOrder._id} 
              workOrder={workOrder} 
              onUpdateStatus={updateWorkOrderStatus}
            />
          ))}
        </div>
      </div>

      {/* Create Work Order Modal */}
      <WorkOrderModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onSave={createWorkOrder}
        equipment={equipment}
      />
    </div>
  );
}

function StatCard({ title, value, icon: Icon, color }) {
  const colorClasses = {
    blue: 'text-blue-500',
    yellow: 'text-yellow-500',
    green: 'text-green-500',
    red: 'text-red-500',
    purple: 'text-purple-500'
  };

  return (
    <div className="bg-white rounded-lg shadow p-3 sm:p-6">
      <div className="flex items-center justify-between">
        <div className="flex-1 min-w-0">
          <p className="text-xs sm:text-sm font-medium text-gray-600">{title}</p>
          <p className="text-xl sm:text-3xl font-bold text-gray-900">{value}</p>
        </div>
        <Icon className={`w-6 h-6 sm:w-8 sm:h-8 ${colorClasses[color]} flex-shrink-0`} />
      </div>
    </div>
  );
}