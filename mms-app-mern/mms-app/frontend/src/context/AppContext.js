// frontend/src/context/AppContext.js
import React, { createContext, useState, useCallback, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { subscribeToEvent } from '../services/websocket';
import { toast } from 'react-toastify';

export const AppContext = createContext();

export const AppProvider = ({ children }) => {
  const { user } = useAuth();
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [notifications, setNotifications] = useState([]);
  const [activities, setActivities] = useState([]);

  // Subscribe to WebSocket events
  useEffect(() => {
    if (!user) return;

    const unsubscribers = [
      // Equipment events
      subscribeToEvent('equipment:created', (data) => {
        toast.success('New equipment added');
        addActivity('Equipment created', 'Equipment', data);
      }),
      subscribeToEvent('equipment:updated', (data) => {
        addActivity('Equipment updated', 'Equipment', data);
      }),
      
      // Inspection events
      subscribeToEvent('inspection:created', (data) => {
        toast.info('New inspection scheduled');
        addActivity('Inspection scheduled', 'Inspection', data);
      }),
      subscribeToEvent('inspection:completed', (data) => {
        toast.success('Inspection completed');
        addActivity('Inspection completed', 'Inspection', data);
      }),
      
      // Backlog events
      subscribeToEvent('backlog:created', (data) => {
        addActivity('Backlog created', 'Backlog', data);
      }),
      subscribeToEvent('backlog:autoGenerated', (data) => {
        toast.warning('Auto backlog generated');
        addActivity('Auto backlog generated', 'Backlog', data);
      }),
      
      // Work order events
      subscribeToEvent('workorder:autoGenerated', (data) => {
        toast.warning('Auto work order generated');
        addActivity('Auto work order generated', 'Work Order', data);
      }),
      subscribeToEvent('workorders:created', (data) => {
        toast.success(`${data.length} work orders created`);
        addActivity('Work orders created', 'Work Order', data);
      })
    ];

    return () => {
      unsubscribers.forEach(unsub => unsub());
    };
  }, [user]);

  const addActivity = useCallback((description, type, data) => {
    const activity = {
      id: Date.now(),
      description,
      type,
      data,
      timestamp: new Date().toISOString(),
      user: user?.name || 'System'
    };
    
    setActivities(prev => [activity, ...prev].slice(0, 50)); // Keep last 50 activities
  }, [user]);

  const addNotification = useCallback((notification) => {
    setNotifications(prev => [
      { ...notification, id: Date.now(), read: false },
      ...prev
    ]);
  }, []);

  const markNotificationAsRead = useCallback((id) => {
    setNotifications(prev => 
      prev.map(notif => 
        notif.id === id ? { ...notif, read: true } : notif
      )
    );
  }, []);

  const clearNotifications = useCallback(() => {
    setNotifications([]);
  }, []);

  const value = {
    sidebarOpen,
    setSidebarOpen,
    notifications,
    activities,
    addActivity,
    addNotification,
    markNotificationAsRead,
    clearNotifications
  };

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
};
